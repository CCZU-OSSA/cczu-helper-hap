#![allow(unused_imports)]

use prost::Message;
use rinf::{
    debug_print, send_rust_signal, signal_channel,
    DartSignal, SignalReceiver, SignalSender,
};
use std::sync::LazyLock;


// @generated
// This file is @generated by prost-build.
/// \[DART-SIGNAL\]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ICalendarInput {
    #[prost(string, tag="1")]
    pub firstweekdate: ::prost::alloc::string::String,
    #[prost(int32, optional, tag="2")]
    pub reminder: ::core::option::Option<i32>,
    #[prost(message, optional, tag="3")]
    pub account: ::core::option::Option<super::account::AccountData>,
}
/// \[RUST-SIGNAL\]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ICalendarOutput {
    #[prost(bool, tag="1")]
    pub ok: bool,
    #[prost(string, tag="2")]
    pub data: ::prost::alloc::string::String,
}
/// \[DART-SIGNAL\]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ICalendarWxInput {
    #[prost(string, tag="1")]
    pub firstweekdate: ::prost::alloc::string::String,
    #[prost(int32, optional, tag="2")]
    pub reminder: ::core::option::Option<i32>,
    #[prost(message, optional, tag="3")]
    pub account: ::core::option::Option<super::account::AccountData>,
    #[prost(string, optional, tag="4")]
    pub term: ::core::option::Option<::prost::alloc::string::String>,
}
/// \[DART-SIGNAL\]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct WeChatTermsInput {
}
/// \[RUST-SIGNAL\]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WeChatTermsOutput {
    #[prost(bool, tag="1")]
    pub ok: bool,
    #[prost(string, repeated, tag="2")]
    pub terms: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
// @@protoc_insertion_point(module)

type ICalendarInputChannel = LazyLock<(
    SignalSender<DartSignal<ICalendarInput>>,
    SignalReceiver<DartSignal<ICalendarInput>>,
)>;
pub static I_CALENDAR_INPUT_CHANNEL: ICalendarInputChannel =
    LazyLock::new(signal_channel);

impl ICalendarInput {
    pub fn get_dart_signal_receiver() -> SignalReceiver<DartSignal<Self>> {
        I_CALENDAR_INPUT_CHANNEL.1.clone()
    }
}

impl ICalendarOutput {
    pub fn send_signal_to_dart(&self) {
        let result = send_rust_signal(
            16,
            self.encode_to_vec(),
            Vec::new(),
        );
        if let Err(error) = result {
            debug_print!("{error}\n{self:?}");
        }
    }
}

type ICalendarWxInputChannel = LazyLock<(
    SignalSender<DartSignal<ICalendarWxInput>>,
    SignalReceiver<DartSignal<ICalendarWxInput>>,
)>;
pub static I_CALENDAR_WX_INPUT_CHANNEL: ICalendarWxInputChannel =
    LazyLock::new(signal_channel);

impl ICalendarWxInput {
    pub fn get_dart_signal_receiver() -> SignalReceiver<DartSignal<Self>> {
        I_CALENDAR_WX_INPUT_CHANNEL.1.clone()
    }
}

type WeChatTermsInputChannel = LazyLock<(
    SignalSender<DartSignal<WeChatTermsInput>>,
    SignalReceiver<DartSignal<WeChatTermsInput>>,
)>;
pub static WE_CHAT_TERMS_INPUT_CHANNEL: WeChatTermsInputChannel =
    LazyLock::new(signal_channel);

impl WeChatTermsInput {
    pub fn get_dart_signal_receiver() -> SignalReceiver<DartSignal<Self>> {
        WE_CHAT_TERMS_INPUT_CHANNEL.1.clone()
    }
}

impl WeChatTermsOutput {
    pub fn send_signal_to_dart(&self) {
        let result = send_rust_signal(
            19,
            self.encode_to_vec(),
            Vec::new(),
        );
        if let Err(error) = result {
            debug_print!("{error}\n{self:?}");
        }
    }
}
