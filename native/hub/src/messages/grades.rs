#![allow(unused_imports)]

use prost::Message;
use rinf::{
    debug_print, send_rust_signal, signal_channel,
    DartSignal, SignalReceiver, SignalSender,
};
use std::sync::LazyLock;


// @generated
// This file is @generated by prost-build.
/// \[DART-SIGNAL\]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GradesInput {
    #[prost(message, optional, tag="3")]
    pub account: ::core::option::Option<super::account::AccountData>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GradeData {
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub point: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub grade: ::prost::alloc::string::String,
}
/// \[RUST-SIGNAL\]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GradesOutput {
    #[prost(bool, tag="1")]
    pub ok: bool,
    #[prost(message, repeated, tag="2")]
    pub data: ::prost::alloc::vec::Vec<GradeData>,
    #[prost(string, optional, tag="3")]
    pub error: ::core::option::Option<::prost::alloc::string::String>,
}
/// \[DART-SIGNAL\]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WeChatGradesInput {
    #[prost(message, optional, tag="3")]
    pub account: ::core::option::Option<super::account::AccountData>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WeChatGradeData {
    #[prost(string, tag="1")]
    pub class_name: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub course_name: ::prost::alloc::string::String,
    #[prost(int32, tag="3")]
    pub term: i32,
    #[prost(float, tag="4")]
    pub credits: f32,
    #[prost(float, tag="5")]
    pub usual_grade: f32,
    #[prost(float, tag="6")]
    pub mid_grade: f32,
    #[prost(float, tag="7")]
    pub end_grade: f32,
    #[prost(float, tag="8")]
    pub grade: f32,
    #[prost(string, tag="9")]
    pub exam_type: ::prost::alloc::string::String,
    #[prost(string, tag="10")]
    pub teacher_name: ::prost::alloc::string::String,
    #[prost(string, tag="11")]
    pub course_type_name: ::prost::alloc::string::String,
    #[prost(float, tag="12")]
    pub grade_points: f32,
}
/// \[RUST-SIGNAL\]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WeChatGradesOutput {
    #[prost(bool, tag="1")]
    pub ok: bool,
    #[prost(message, repeated, tag="2")]
    pub data: ::prost::alloc::vec::Vec<WeChatGradeData>,
    #[prost(string, optional, tag="3")]
    pub error: ::core::option::Option<::prost::alloc::string::String>,
}
/// \[DART-SIGNAL\]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WeChatRankInput {
    #[prost(message, optional, tag="3")]
    pub account: ::core::option::Option<super::account::AccountData>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WeChatRankData {
    #[prost(string, tag="1")]
    pub rank: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub major_rank: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub gpa: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub total_credits: ::prost::alloc::string::String,
}
/// \[RUST-SIGNAL\]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WeChatRankDataOutput {
    #[prost(bool, tag="1")]
    pub ok: bool,
    #[prost(message, optional, tag="2")]
    pub data: ::core::option::Option<WeChatRankData>,
    #[prost(string, optional, tag="3")]
    pub error: ::core::option::Option<::prost::alloc::string::String>,
}
// @@protoc_insertion_point(module)

type GradesInputChannel = LazyLock<(
    SignalSender<DartSignal<GradesInput>>,
    SignalReceiver<DartSignal<GradesInput>>,
)>;
pub static GRADES_INPUT_CHANNEL: GradesInputChannel =
    LazyLock::new(signal_channel);

impl GradesInput {
    pub fn get_dart_signal_receiver() -> SignalReceiver<DartSignal<Self>> {
        GRADES_INPUT_CHANNEL.1.clone()
    }
}

impl GradesOutput {
    pub fn send_signal_to_dart(&self) {
        let result = send_rust_signal(
            8,
            self.encode_to_vec(),
            Vec::new(),
        );
        if let Err(error) = result {
            debug_print!("{error}\n{self:?}");
        }
    }
}

type WeChatGradesInputChannel = LazyLock<(
    SignalSender<DartSignal<WeChatGradesInput>>,
    SignalReceiver<DartSignal<WeChatGradesInput>>,
)>;
pub static WE_CHAT_GRADES_INPUT_CHANNEL: WeChatGradesInputChannel =
    LazyLock::new(signal_channel);

impl WeChatGradesInput {
    pub fn get_dart_signal_receiver() -> SignalReceiver<DartSignal<Self>> {
        WE_CHAT_GRADES_INPUT_CHANNEL.1.clone()
    }
}

impl WeChatGradesOutput {
    pub fn send_signal_to_dart(&self) {
        let result = send_rust_signal(
            11,
            self.encode_to_vec(),
            Vec::new(),
        );
        if let Err(error) = result {
            debug_print!("{error}\n{self:?}");
        }
    }
}

type WeChatRankInputChannel = LazyLock<(
    SignalSender<DartSignal<WeChatRankInput>>,
    SignalReceiver<DartSignal<WeChatRankInput>>,
)>;
pub static WE_CHAT_RANK_INPUT_CHANNEL: WeChatRankInputChannel =
    LazyLock::new(signal_channel);

impl WeChatRankInput {
    pub fn get_dart_signal_receiver() -> SignalReceiver<DartSignal<Self>> {
        WE_CHAT_RANK_INPUT_CHANNEL.1.clone()
    }
}

impl WeChatRankDataOutput {
    pub fn send_signal_to_dart(&self) {
        let result = send_rust_signal(
            14,
            self.encode_to_vec(),
            Vec::new(),
        );
        if let Err(error) = result {
            debug_print!("{error}\n{self:?}");
        }
    }
}
