#![allow(unused_imports)]

use prost::Message;
use rinf::{
    debug_print, send_rust_signal, signal_channel,
    DartSignal, SignalReceiver, SignalSender,
};
use std::sync::LazyLock;


// @generated
// This file is @generated by prost-build.
/// \[DART-SIGNAL\]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetVersionInput {
}
/// \[RUST-SIGNAL\]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetVersionOutput {
    #[prost(bool, tag="1")]
    pub ok: bool,
    #[prost(message, optional, tag="2")]
    pub data: ::core::option::Option<VersionInfo>,
    #[prost(string, optional, tag="3")]
    pub error: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VersionInfo {
    #[prost(string, tag="1")]
    pub tag_name: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub body: ::prost::alloc::string::String,
    #[prost(message, repeated, tag="4")]
    pub assets: ::prost::alloc::vec::Vec<AssetInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AssetInfo {
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub browser_download_url: ::prost::alloc::string::String,
    #[prost(int32, tag="3")]
    pub size: i32,
}
// @@protoc_insertion_point(module)

type GetVersionInputChannel = LazyLock<(
    SignalSender<DartSignal<GetVersionInput>>,
    SignalReceiver<DartSignal<GetVersionInput>>,
)>;
pub static GET_VERSION_INPUT_CHANNEL: GetVersionInputChannel =
    LazyLock::new(signal_channel);

impl GetVersionInput {
    pub fn get_dart_signal_receiver() -> SignalReceiver<DartSignal<Self>> {
        GET_VERSION_INPUT_CHANNEL.1.clone()
    }
}

impl GetVersionOutput {
    pub fn send_signal_to_dart(&self) {
        let result = send_rust_signal(
            23,
            self.encode_to_vec(),
            Vec::new(),
        );
        if let Err(error) = result {
            debug_print!("{error}\n{self:?}");
        }
    }
}
